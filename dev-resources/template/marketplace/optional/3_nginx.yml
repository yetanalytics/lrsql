AWSTemplateFormatVersion: "2010-09-09"
Description: "RDS nginx proxy"
Parameters:
  VPCStackName:
    Description: Name of our VPC Stack
    Type: String
  DBStackName:
    Description: Name of our DB Stack
    Type: String
  AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  InstanceType:
    Description: Instance Type
    Type: String
    Default: t3.micro
Resources:
  NginxInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for NginxInstance 
      VpcId:
        Fn::ImportValue:
          !Join [":", [!Ref "VPCStackName", "VPCId"]]
  SSMInstanceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Ingress from NginxInstance
      GroupId:
        Fn::ImportValue:
          !Join [":", [!Ref "DBStackName", "DBInstanceSG"]]
      IpProtocol: tcp
      FromPort:
        Fn::ImportValue:
          !Join [":", [!Ref "DBStackName", "DBPort"]]
      ToPort:
        Fn::ImportValue:
          !Join [":", [!Ref "DBStackName", "DBPort"]]
  NginxRDSProxy:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          proxy:
            - 01_installAndRunProxy
        00_installAndRunProxy:
          files:
            '/etc/nginx/nginx.conf':
              content: !Sub 
                - |
                   worker_processes  1;
                   error_log  /var/log/nginx/error.log;
                   events {
                     worker_connections  1024;
                   }
                   stream {
                     # Define an upstream database server
                     upstream database_server {
                       # The IP address and port of your RDS instance
                       server ${Host}:${Port};
                     }

                     # Configure a server to listen on a local port and proxy to the RDS instance
                     server {
                       listen ${Port}; # The port Nginx will listen on locally
                       proxy_pass database_server; # Proxy connections to the upstream database

                       # Optional configurations for better handling
                       proxy_connect_timeout 10s;   # Timeout for establishing a connection to the RDS
                       proxy_timeout 60s;           # Timeout for idle connections
                       proxy_buffer_size 16k;       # Buffer size for network packets
                     }
                   }
                - Port:
                    Fn::ImportValue:
                      !Join [":", [!Ref "DBStackName", "DBPort"]]
                  Host:
                    Fn::ImportValue:
                      !Join [":", [!Ref "DBStackName", "DBHost"]]
              mode: '000400'
              owner: root
              group: root
          commands:
            01install_nginx:
              cwd: "~"
              command: "amazon-linux-extras install -y nginx-mod-stream nginx"
            02start_proxy:
              cwd: "~"
              command: "systemctl start nginx"
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !Ref NginxInstanceSG
      SubnetId:
        Fn::ImportValue: !Join [':', [!Ref 'VPCStackName', 'PublicSubnetOne']]
      UserData: 
        !Base64
          'Fn::Join':
            - ''
            - - |
              #!/bin/bash -xe
              - |
              # Run init
              - 'sudo /opt/aws/bin/cfn-init -v --stack '
              - !Ref AWS::StackName
              - ' --resource EC2Bastion'
              - ' --configsets proxy'
              - ' --region '
              - !Ref AWS::Region
              - |+
Outputs:
  ProxyPublicIp:
    Description: Public IP of Nginx Proxy 
    Value: !GetAtt NginxRDSProxy.PublicIp
  ProxySG:
    Description: SG group for Nginx Proxy
    Value: !Ref NginxInstanceSG
