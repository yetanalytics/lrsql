AWSTemplateFormatVersion: "2010-09-09"
Description: "SSM Stack for LRSQL"
Parameters:
  DBMasterUserPasswordPath:
    Description: SSM path to DBMasterPassword
    Type: String
    Default: "/lrsql/marketplace/DB_MASTER_USER_PASSWORD"
  DBAppUserPasswordPath:
    Description: SSM path to initial user password for app
    Type: String
    Default: "/lrsql/marketplace/DB_APP_USER_PASSWORD"
Resources:
  SSMUpdatePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: IAM Policy for ssm update lambda access.
      ManagedPolicyName: !Sub "${AWS::StackName}-${AWS::Region}-lambda-ssm-update-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow access to SSM and VPC related networking
          - Effect: Allow
            Action:
              - "ssm:PutParameter"
              - "ssm:DeleteParameter"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBMasterUserPasswordPath}"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBAppUserPasswordPath}"
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
  SSMUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref SSMUpdatePolicy
  SSMGeneratePasswordFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt SSMUpdateRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib.request
          import string
          import secrets
          import random

          from urllib.error import URLError, HTTPError
          
          def generate_password():
            length = random.randint(12, 20)
            alphabet = string.ascii_letters + string.digits + string.punctuation
            password = ''.join(secrets.choice(alphabet) for i in range(length))
            return password

          def send_response(event, context, response_status, response_data):
            responseBody = json.dumps({
              "Status": response_status,
              "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event['StackId'],
              "RequestId": event['RequestId'],
              "LogicalResourceId": event['LogicalResourceId'],
              "Data": response_data
            })

            responseUrl = event['ResponseURL']
            
            headers = {
              'content-type': '',
              'content-length': str(len(responseBody))
            }
            
            try:
              request = urllib.request.Request(responseUrl,
                                               data=responseBody.encode('utf-8'),
                                               headers=headers,
                                               method='PUT')
              with urllib.request.urlopen(request) as response:
                print("Status code:", response.getcode())
            except Exception as e:
              print("send(..) failed executing requests.put(..):", e)

            
          def lambda_handler(event, context):
            ssm = boto3.client('ssm')
                
            try:
              ssm_path = event['ResourceProperties']['SSMPath']
              if event['RequestType'] == 'Delete':
                ssm.delete_parameter(Name=ssm_path)
              else:
                ssm.put_parameter(
                  Name=ssm_path,
                  Value=generate_password(),
                  Type='SecureString',
                  Overwrite=True
                )
                  
              # Send a success response to CloudFormation
              send_response(event, context, "SUCCESS", {})
                
            except Exception as e:
              # Send a failure response to CloudFormation
              send_response(event, context, "FAILED", {"Message": str(e)})
      Runtime: python3.12
      Timeout: 30
  DBMasterPasswordGenerate:
    Type: Custom::GeneratePassword
    Properties:
      ServiceToken: !GetAtt SSMGeneratePasswordFunction.Arn
      SSMPath: !Ref DBMasterUserPasswordPath
  DBAppUserPasswordGenerate:
    Type: Custom::GeneratePaswword
    Properties:
      ServiceToken: !GetAtt SSMGeneratePasswordFunction.Arn
      SSMPath: !Ref DBAppUserPasswordPath
Outputs:
  DBMasterUserPasswordPath:
    Description: The name (path) of the SSM Parameter for the database password
    Value: !Ref DBMasterUserPasswordPath
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DBMasterUserPasswordPath' ] ]
  DBAppUserPasswordPath:
    Description: The name (path) of the SSM Parameter for the app password
    Value: !Ref DBAppUserPasswordPath
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'DBAppUserPasswordPath' ] ]
